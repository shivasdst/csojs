--- pages/manager/PluginManagementHandler.inc.php	2012-03-15 10:19:29.000000000 -0700
+++ pages/manager/PluginManagementHandler.inc.php	2013-03-04 15:53:15.000000000 -0800
@@ -1,9 +1,9 @@
 <?php
 
 /**
- * @file PluginManagementHandler.inc.php
+ * @file pages/manager/PluginManagementHandler.inc.php
  *
- * Copyright (c) 2003-2012 John Willinsky
+ * Copyright (c) 2003-2013 John Willinsky
  * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
  *
  * @class PluginManagementHandler
@@ -26,40 +26,43 @@
 class PluginManagementHandler extends ManagerHandler {
 	/**
 	 * Constructor
-	 **/
+	 */
 	function PluginManagementHandler() {
 		parent::ManagerHandler();
 	}
 
 	/**
 	 * Display a list of plugins along with management options.
+	 * @param $args array
+	 * @param $request PKPRequest
 	 */
-	function managePlugins($args) {
+	function managePlugins($args, &$request) {
 		$this->validate();
 		$path = isset($args[0])?$args[0]:null;
-		$plugin = isset($args[1])?$args[1]:null;
+		$category = isset($args[1])?$args[1]:null;
+		$plugin = isset($args[2])?$args[2]:null;
 
 		switch($path) {
 			case 'install':
-				$this->showInstallForm();
+				$this->_showInstallForm($request);
 				break;
 			case 'installPlugin':
-				$this->uploadPlugin('install');
+				$this->_uploadPlugin($request, 'install');
 				break;
 			case 'upgrade':
-				$this->showUpgradeForm($plugin);
+				$this->_showUpgradeForm($request, $category, $plugin);
 				break;
 			case 'upgradePlugin':
-				$this->uploadPlugin('upgrade');
+				$this->_uploadPlugin($request, 'upgrade', $category, $plugin);
 				break;
 			case 'delete':
-				$this->showDeleteForm($plugin);
+				$this->_showDeleteForm($request, $category, $plugin);
 				break;
 			case 'deletePlugin':
-				$this->deletePlugin($plugin);
+				$this->_deletePlugin($request, $category, $plugin);
 				break;
 			default:
-				Request::redirect(null, 'manager', 'plugins');
+				$request->redirect(null, 'manager', 'plugins');
 		}
 
 		$this->setupTemplate(true);
@@ -67,8 +70,9 @@
 
 	/**
 	 * Show plugin installation form.
+	 * @param $request PKPRequest
 	 */
-	function showInstallForm() {
+	function _showInstallForm($request) {
 		$this->validate();
 		$templateMgr =& TemplateManager::getManager();
 		$this->setupTemplate(true);
@@ -77,46 +81,48 @@
 		$templateMgr->assign('uploaded', false);
 		$templateMgr->assign('error', false);
 
-		$templateMgr->assign('pageHierarchy', $this->setBreadcrumbs(true));
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true));
 
 		$templateMgr->display('manager/plugins/managePlugins.tpl');
 	}
 
 	/**
 	 * Show form to select plugin for upgrade.
-	 * @param plugin string
+	 * @param $request PKPRequest
+	 * @param $category string
+	 * @param $plugin string
 	 */
-	function showUpgradeForm($plugin) {
+	function _showUpgradeForm($request, $category, $plugin) {
 		$this->validate();
 		$templateMgr =& TemplateManager::getManager();
 		$this->setupTemplate(true);
 
 		$templateMgr->assign('path', 'upgrade');
+		$templateMgr->assign('category', $category);
 		$templateMgr->assign('plugin', $plugin);
 		$templateMgr->assign('uploaded', false);
-
-		$category = $this->getPluginCategory($plugin);
-		$templateMgr->assign('pageHierarchy', $this->setBreadcrumbs(true, $category));
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true, $category));
 
 		$templateMgr->display('manager/plugins/managePlugins.tpl');
 	}
 
 	/**
 	 * Confirm deletion of plugin.
-	 * @param plugin string
+	 * @param $request PKPRequest
+	 * @param $category string
+	 * @param $plugin string
 	 */
-	function showDeleteForm($plugin) {
+	function _showDeleteForm($request, $category, $plugin) {
 		$this->validate();
 		$templateMgr =& TemplateManager::getManager();
 		$this->setupTemplate(true);
 
 		$templateMgr->assign('path', 'delete');
+		$templateMgr->assign('category', $category);
 		$templateMgr->assign('plugin', $plugin);
 		$templateMgr->assign('deleted', false);
 		$templateMgr->assign('error', false);
-
-		$category = $this->getPluginCategory($plugin);
-		$templateMgr->assign('pageHierarchy', $this->setBreadcrumbs(true, $category));
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true, $category));
 
 		$templateMgr->display('manager/plugins/managePlugins.tpl');
 	}
@@ -124,9 +130,12 @@
 
 	/**
 	 * Decompress uploaded plugin and install in the correct plugin directory.
-	 * $param function string type of operation to perform after upload ('upgrade' or 'install')
+	 * @param $request PKPRequest
+	 * @param $function string type of operation to perform after upload ('upgrade' or 'install')
+	 * @param $category string the category of the uploaded plugin (upgrade only)
+	 * @param $plugin string the name of the uploaded plugin (upgrade only)
 	 */
-	function uploadPlugin($function) {
+	function _uploadPlugin($request, $function, $category = null, $plugin = null) {
 		$this->validate();
 		$templateMgr =& TemplateManager::getManager();
 		$this->setupTemplate(true);
@@ -134,13 +143,12 @@
 		$templateMgr->assign('error', false);
 		$templateMgr->assign('uploaded', false);
 		$templateMgr->assign('path', $function);
-		$templateMgr->assign('pageHierarchy', $this->setBreadcrumbs(true));
 
 		$errorMsg = '';
-		if (Request::getUserVar('uploadPlugin')) {
+		if ($request->getUserVar('uploadPlugin')) {
 			import('classes.file.TemporaryFileManager');
 			$temporaryFileManager = new TemporaryFileManager();
-			$user =& Request::getUser();
+			$user =& $request->getUser();
 		} else {
 			$errorMsg = 'manager.plugins.fileSelectError';
 		}
@@ -176,9 +184,9 @@
 			$pluginDir .= DIRECTORY_SEPARATOR . $pluginName;
 			if (is_dir($pluginDir)) {
 				if ($function == 'install') {
-					$this->installPlugin($pluginDir, $templateMgr);
+					$this->_installPlugin($request, $pluginDir, $templateMgr);
 				} else if ($function == 'upgrade') {
-					$this->upgradePlugin($pluginDir, $templateMgr);
+					$this->_upgradePlugin($request, $pluginDir, $templateMgr, $category, $plugin);
 				}
 			} else {
 				$errorMsg = 'manager.plugins.invalidPluginArchive';
@@ -195,44 +203,64 @@
 
 	/**
 	 * Installs the uploaded plugin
+	 * @param $request PKPRequest
 	 * @param $path string path to plugin Directory
 	 * @param $templateMgr reference to template manager
 	 * @return boolean
 	 */
-	function installPlugin($path, &$templateMgr) {
+	function _installPlugin($request, $path, &$templateMgr) {
 		$this->validate();
 		$versionFile = $path . VERSION_FILE;
 		$templateMgr->assign('error', true);
-		$templateMgr->assign('path', 'install');
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true));
 
-		$pluginVersion =& VersionCheck::getValidPluginVersionInfo($versionFile, $templateMgr);
+		$pluginVersion =& VersionCheck::getValidPluginVersionInfo($versionFile);
 		if (is_null($pluginVersion)) return false;
 		assert(is_a($pluginVersion, 'Version'));
 
-		$versionDao =& DAORegistry::getDAO('VersionDAO');
-		$installedPlugin = $versionDao->getCurrentVersion($pluginVersion->getProduct(), true);
+		$versionDao =& DAORegistry::getDAO('VersionDAO'); /* @var $versionDao VersionDAO */
+		$installedPlugin = $versionDao->getCurrentVersion($pluginVersion->getProductType(), $pluginVersion->getProduct(), true);
 
 		if(!$installedPlugin) {
+			$pluginLibDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'pkp' . DIRECTORY_SEPARATOR . strtr($pluginVersion->getProductType(), '.', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $pluginVersion->getProduct();
 			$pluginDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . strtr($pluginVersion->getProductType(), '.', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $pluginVersion->getProduct();
 
-			if(!FileManager::copyDir($path, $pluginDest)) {
+			// Copy the plug-in from the temporary folder to the
+			// target folder.
+			// Start with the library part (if any).
+			$libPath = $path . DIRECTORY_SEPARATOR . 'lib';
+			$fileManager = new FileManager();
+			if (is_dir($libPath)) {
+				if(!$fileManager->copyDir($libPath, $pluginLibDest)) {
+					$templateMgr->assign('message', 'manager.plugins.copyError');
+					return false;
+				}
+				// Remove the library part of the temporary folder.
+				$fileManager->rmtree($libPath);
+			}
+
+			// Continue with the application-specific part (mandatory).
+			if(!$fileManager->copyDir($path, $pluginDest)) {
 				$templateMgr->assign('message', 'manager.plugins.copyError');
 				return false;
 			}
 
-			// If plugin has an install.xml file, update database with it
-			$installFile = $pluginDest . INSTALL_FILE;
-			if(FileManager::fileExists($installFile)) {
-				$params = $this->setConnectionParams();
-				$installer = new Install($params, $installFile, true);
-				$installer->setCurrentVersion($pluginVersion);
+			// Remove the temporary folder.
+			$fileManager->rmtree(dirname($path));
 
-				if (!$installer->execute()) {
-					// Roll back the copy
-					FileManager::rmtree($pluginDest);
-					$templateMgr->assign('message', array('manager.plugins.installFailed', $installer->getErrorString()));
-					return false;
-				}
+			// Upgrade the database with the new plug-in.
+			$installFile = $pluginDest . INSTALL_FILE;
+			if(!is_file($installFile)) $installFile = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'pkp' . DIRECTORY_SEPARATOR . 'xml' . DIRECTORY_SEPARATOR . 'defaultPluginInstall.xml';
+			assert(is_file($installFile));
+			$params = $this->_setConnectionParams();
+			$installer = new Install($params, $installFile, true);
+			$installer->setCurrentVersion($pluginVersion);
+			if (!$installer->execute()) {
+				// Roll back the copy
+				if (is_dir($pluginLibDest)) $fileManager->rmtree($pluginLibDest);
+				if (is_dir($pluginDest)) $fileManager->rmtree($pluginDest);
+				$templateMgr->assign('message', array('manager.plugins.installFailed', $installer->getErrorString()));
+				return false;
 			}
 
 			$message = array('manager.plugins.installSuccessful', $pluginVersion->getVersionString());
@@ -243,7 +271,7 @@
 			$versionDao->insertVersion($pluginVersion, true);
 			return true;
 		} else {
-			if ($this->checkIfNewer($pluginVersion->getProduct(), $pluginVersion)) {
+			if ($this->_checkIfNewer($pluginVersion->getProductType(), $pluginVersion->getProduct(), $pluginVersion)) {
 				$templateMgr->assign('message', 'manager.plugins.pleaseUpgrade');
 				return false;
 			} else {
@@ -255,46 +283,84 @@
 
 	/**
 	 * Upgrade a plugin to a newer version from the user's filesystem
+	 * @param $request PKPRequest
 	 * @param $path string path to plugin Directory
 	 * @param $templateMgr reference to template manager
+	 * @param $category string
+	 * @param $plugin string
 	 * @return boolean
 	 */
-	function upgradePlugin($path, &$templateMgr) {
+	function _upgradePlugin($request, $path, &$templateMgr, $category, $plugin) {
 		$this->validate();
 		$versionFile = $path . VERSION_FILE;
 		$templateMgr->assign('error', true);
-		$templateMgr->assign('path', 'upgrade');
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true, $category));
 
-		$pluginVersion =& VersionCheck::getValidPluginVersionInfo($versionFile, $templateMgr);
+		$pluginVersion =& VersionCheck::getValidPluginVersionInfo($versionFile);
 		if (is_null($pluginVersion)) return false;
 		assert(is_a($pluginVersion, 'Version'));
 
+		// Check whether the uploaded plug-in fits the original plug-in.
+		if ('plugins.'.$category != $pluginVersion->getProductType()) {
+			$templateMgr->assign('message', 'manager.plugins.wrongCategory');
+			return false;
+		}
+
+		if ($plugin != $pluginVersion->getProduct()) {
+			$templateMgr->assign('message', 'manager.plugins.wrongName');
+			return false;
+		}
+
 		$versionDao =& DAORegistry::getDAO('VersionDAO');
-		$installedPlugin = $versionDao->getCurrentVersion($pluginVersion->getProduct(), true);
+		$installedPlugin = $versionDao->getCurrentVersion($pluginVersion->getProductType(), $pluginVersion->getProduct(), true);
 		if(!$installedPlugin) {
 			$templateMgr->assign('message', 'manager.plugins.pleaseInstall');
 			return false;
 		}
 
-		if ($this->checkIfNewer($pluginVersion->getProduct(), $pluginVersion)) {
+		if ($this->_checkIfNewer($pluginVersion->getProductType(), $pluginVersion->getProduct(), $pluginVersion)) {
 			$templateMgr->assign('message', 'manager.plugins.installedVersionNewer');
 			return false;
 		} else {
-			$pluginDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . strtr($pluginVersion->getProductType(), '.', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $pluginVersion->getProduct();
+			$pluginDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $category . DIRECTORY_SEPARATOR . $plugin;
+			$pluginLibDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'pkp' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $category . DIRECTORY_SEPARATOR . $plugin;
 
-			FileManager::rmtree($pluginDest);
-			if(FileManager::fileExists($pluginDest, 'dir')) {
+			// Delete existing files.
+			$fileManager = new FileManager();
+			if (is_dir($pluginDest)) $fileManager->rmtree($pluginDest);
+			if (is_dir($pluginLibDest)) $fileManager->rmtree($pluginLibDest);
+
+			// Check whether deleting has worked.
+			if(is_dir($pluginDest) || is_dir($pluginLibDest)) {
 				$templateMgr->assign('message', 'manager.plugins.deleteError');
 				return false;
 			}
-			if(!FileManager::copyDir($path, $pluginDest)) {
+
+			// Copy the plug-in from the temporary folder to the
+			// target folder.
+			// Start with the library part (if any).
+			$libPath = $path . DIRECTORY_SEPARATOR . 'lib';
+			if (is_dir($libPath)) {
+				if(!$fileManager->copyDir($libPath, $pluginLibDest)) {
+					$templateMgr->assign('message', 'manager.plugins.copyError');
+					return false;
+				}
+				// Remove the library part of the temporary folder.
+				$fileManager->rmtree($libPath);
+			}
+
+			// Continue with the application-specific part (mandatory).
+			if(!$fileManager->copyDir($path, $pluginDest)) {
 				$templateMgr->assign('message', 'manager.plugins.copyError');
 				return false;
 			}
 
+			// Remove the temporary folder.
+			$fileManager->rmtree(dirname($path));
+
 			$upgradeFile = $pluginDest . UPGRADE_FILE;
-			if(FileManager::fileExists($upgradeFile)) {
-				$params = $this->setConnectionParams();
+			if($fileManager->fileExists($upgradeFile)) {
+				$params = $this->_setConnectionParams();
 				$installer = new Upgrade($params, $upgradeFile, true);
 
 				if (!$installer->execute()) {
@@ -307,6 +373,8 @@
 			$pluginVersion->setCurrent(1);
 			$versionDao->insertVersion($pluginVersion, true);
 
+			$templateMgr->assign('category', $category);
+			$templateMgr->assign('plugin', $plugin);
 			$templateMgr->assign('message', array('manager.plugins.upgradeSuccessful', $pluginVersion->getVersionString()));
 			$templateMgr->assign('uploaded', true);
 			$templateMgr->assign('error', false);
@@ -317,9 +385,11 @@
 
 	/**
 	 * Delete a plugin from the system
-	 * @param plugin string
+	 * @param $request PKPRequest
+	 * @param $category string
+	 * @param $plugin string
 	 */
-	function deletePlugin($plugin) {
+	function _deletePlugin($request, $category, $plugin) {
 		$this->validate();
 		$templateMgr =& TemplateManager::getManager();
 		$this->setupTemplate(true);
@@ -328,23 +398,26 @@
 		$templateMgr->assign('deleted', false);
 		$templateMgr->assign('error', false);
 
-		$versionDao =& DAORegistry::getDAO('VersionDAO');
-		$installedPlugin = $versionDao->getCurrentVersion($plugin, true);
-		$category = $this->getPluginCategory($plugin);
+		$versionDao =& DAORegistry::getDAO('VersionDAO'); /* @var $versionDao VersionDAO */
+		$installedPlugin = $versionDao->getCurrentVersion('plugins.'.$category, $plugin, true);
 
 		if ($installedPlugin) {
 			$pluginDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $category . DIRECTORY_SEPARATOR . $plugin;
+			$pluginLibDest = Core::getBaseDir() . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'pkp' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $category . DIRECTORY_SEPARATOR . $plugin;
 
 			//make sure plugin type is valid and then delete the files
 			if (in_array($category, PluginRegistry::getCategories())) {
-				FileManager::rmtree($pluginDest);
+				// Delete the plugin from the file system.
+				$fileManager = new FileManager();
+				$fileManager->rmtree($pluginDest);
+				$fileManager->rmtree($pluginLibDest);
 			}
 
-			if(FileManager::fileExists($pluginDest, 'dir')) {
+			if(is_dir($pluginDest) || is_dir($pluginLibDest)) {
 				$templateMgr->assign('error', true);
 				$templateMgr->assign('message', 'manager.plugins.deleteError');
 			} else {
-				$versionDao->disableVersion($plugin);
+				$versionDao->disableVersion('plugins.'.$category, $plugin);
 				$templateMgr->assign('deleted', true);
 			}
 
@@ -353,19 +426,20 @@
 			$templateMgr->assign('message', 'manager.plugins.doesNotExist');
 		}
 
-		$templateMgr->assign('pageHierarchy', $this->setBreadcrumbs(true, $category));
+		$templateMgr->assign('pageHierarchy', $this->_setBreadcrumbs($request, true, $category));
 		$templateMgr->display('manager/plugins/managePlugins.tpl');
 	}
 
 	/**
 	 * Checks to see if local version of plugin is newer than installed version
-	 * @param $pluginName string Product name of plugin
+	 * @param $productType string Product type of plugin
+	 * @param $productName string Product name of plugin
 	 * @param $newVersion Version Version object of plugin to check against database
 	 * @return boolean
 	 */
-	function checkIfNewer($pluginName, $newVersion) {
+	function _checkIfNewer($productType, $productName, $newVersion) {
 		$versionDao =& DAORegistry::getDAO('VersionDAO');
-		$installedPlugin = $versionDao->getCurrentVersion($pluginName, true);
+		$installedPlugin = $versionDao->getCurrentVersion($productType, $productName, true);
 
 		if (!$installedPlugin) return false;
 		if ($installedPlugin->compare($newVersion) > 0) return true;
@@ -374,19 +448,20 @@
 
 	/**
 	 * Set the page's breadcrumbs
+	 * @param $request PKPRequest
 	 * @param $subclass boolean
 	 * @param $category string
 	 */
-	function setBreadcrumbs($subclass = false, $category = null) {
+	function _setBreadcrumbs($request, $subclass = false, $category = null) {
 		$templateMgr =& TemplateManager::getManager();
 		$pageCrumbs = array(
 			array(
-				Request::url(null, 'user'),
+				$request->url(null, 'user'),
 				'navigation.user',
 				false
 			),
 			array(
-				Request::url(null, 'manager'),
+				$request->url(null, 'manager'),
 				'manager.journalManagement',
 				false
 			)
@@ -394,7 +469,7 @@
 
 		if ($subclass) {
 			$pageCrumbs[] = array(
-				Request::url(null, 'manager', 'plugins'),
+				$request->url(null, 'manager', 'plugins'),
 				'manager.plugins.pluginManagement',
 				false
 			);
@@ -402,7 +477,7 @@
 
 		if ($category) {
 			$pageCrumbs[] = array(
-				Request::url(null, 'manager', 'plugins', $category),
+				$request->url(null, 'manager', 'plugins', $category),
 				"plugins.categories.$category",
 				false
 			);
@@ -412,24 +487,10 @@
 	}
 
 	/**
-	 * Get the plugin category from the version.
-	 * @param string
-	 * @return string
-	 */
-	function getPluginCategory($plugin) {
-		$versionDao =& DAORegistry::getDAO('VersionDAO');
-		$installedPlugin = $versionDao->getCurrentVersion($plugin, true);
-		if ($installedPlugin) {
-			$productType = explode(".", $installedPlugin->getProductType());
-			return $productType[1];
-		} else return false;
-	}
-
-	/**
 	 * Load database connection parameters into an array (needed for upgrade).
 	 * @return array
 	 */
-	function setConnectionParams() {
+	function _setConnectionParams() {
 		return array(
 			'clientCharset' => Config::getVar('i18n', 'client_charset'),
 			'connectionCharset' => Config::getVar('i18n', 'connection_charset'),
